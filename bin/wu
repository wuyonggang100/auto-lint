#! /usr/bin/env node

// 配置可执行命令,获取用户参数
const program = require("commander");
const chalk = require("chalk");

const cleanArgs = (cmd) => {
  const args = {};
  cmd.options.forEach((op) => {
    const key = op.long.slice(2); // long 表示完整选项， short 表示简写， 如 --foce 简写成 -f, slice(2) 表示去掉 -- 以后的干净值
    console.log("=key=====", key);
    if (cmd[key]) args[key] = cmd[key];
  });
  return args;
};

// 创建 create 命令， 创建新项目, option 选项可以有多个，调用多次表示传多个参数
program
  .command("create [app-name]") // 创建新项目, <> 或 [] 内表示参数
  .description("create a new project") // 命令描述
  .option("-f --force", "overwrite target directory if it exists") // 如果重名, 需要强制创建
  .action((name, options, cmd) => {
    require("../lib/create")(name, options);
    // // name 表示第一个参数的值，app-name
    // console.log("options-----", cmd);
    // console.log("name-----", name);
    // console.log("options-----", options);
  });

// 创建一个 config 命令，写入配置
program
  .command("config [value]")
  .description("inspect and modify the config")
  .option("-g --get <path>", "get value from option")
  .option("-s --set <path> <value>")
  .option("-d --delete <path>", "delete option from config")
  .action((value, options, cmd) => {
    console.log("options-----", cmd);
    console.log("value-----", value);
    console.log("options-----", options);
  });

program
  .command("ui")
  .description("start and open wu-cli ui")
  .option("-p, --port <port>", "Port used for the UI Server")
  .action((cmd) => {
    console.log(cleanArgs(cmd));
  });

//  版本号
program
  .version(`wu-cli@${require("../package.json").version}`)
  .usage(`<command> [option]`); // <> 内的表示参数

program.on("--help", () => {
  console.log();
  console.log(`Run ${chalk.red("wu-cli <command> --help ")} show details`);
  console.log();
});

// 命令后面带的参数
program.parse(process.argv);

// console.log("wu-cli");
